html {
  font-family: sans-serif;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%; }

body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, textarea, p, blockquote, th, td, hr, button, article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  margin: 0;
  padding: 0; }

iframe, article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

audio, canvas, progress, video {
  display: inline-block;
  vertical-align: baseline;
  *display: inline;
  *zoom: 1; }

audio:not([controls]) {
  display: none;
  height: 0; }

body, button, input, optgroup, select, textarea {
  color: #000;
  font-size: 12px;
  font-family: \5FAE\8F6F\96C5\9ED1, \5b8b\4f53, arial, sans-serif; }

input, select, textarea {
  font-size: 100%; }

button {
  overflow: visible; }

button, select {
  text-transform: none; }

button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible; }

button[disabled], html input[disabled] {
  cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0; }

input {
  line-height: normal; }

input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  *width: 13px;
  *height: 13px; }

input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

input[type="search"] {
  -webkit-appearance: textfield;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box; }

input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

fieldset, legend {
  border: none; }

legend {
  *margin-left: -7px; }

textarea {
  overflow: auto; }

optgroup {
  font-weight: bold; }

h1, h2, h3, h4, h5, h6 {
  font-size: 100%;
  font-weight: normal; }

address, caption, cite, code, dfn, em, th, var {
  font-style: normal;
  font-weight: normal; }

del {
  text-decoration: line-through; }

img {
  border: none;
  -ms-interpolation-mode: bicubic; }

svg:not(:root) {
  overflow: hidden; }

hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

pre {
  overflow: auto;
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word; }

code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em;
  _font-family: "courier new", monospace; }

abbr, acronym {
  border: none;
  font-variant: normal; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

th {
  text-align: inherit; }

q {
  quotes: none; }

sub, sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

a {
  background-color: transparent;
  text-decoration: none; }
  a:active, a:hover, a:focus {
    outline: none; }
  a:hover {
    text-decoration: underline; }

*:focus {
  outline: none; }

ul, ol {
  list-style: none outside none; }

div {
  margin-left: auto;
  margin-right: auto; }

/* //linear-gradient(top, #fff, #000)
@mixin linear-gradient($gradient...) {
    background-color: #fff;
    background-image: -webkit-linear-gradient($gradient);
    background-image: -moz-linear-gradient($gradient);
    @if nth($gradient, 1) == top {
        //background-image: linear-gradient(to bottom, $gradient);
    }
    @if $filter {
        filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=nth($gradient,2), endColorstr=nth($gradient,length($gradient)), GradientType=if(nth($gradient, 1) == top or nth($gradient, 1) == bottom, 0, 1));
    }
} */
div {
  width: 300px;
  height: 300px;
  background: #f00;
  transition: all .5s; }

div:hover {
  background-color: #f0f; }
